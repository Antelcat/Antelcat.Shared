<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
<#
#nullable enable
	const string Namespace = "Antelcat.Extensions";
	List<(string Type,string? Value,string? Name)> dic = new()
	{
		("char", "'\\0'" , null),
		("sbyte", "{0}.MinValue" , "SByte"),
		("byte", "{0}.MinValue" , null),
		("short", "{0}.MinValue" , null),
		("ushort", "{0}.MinValue" , "UShort"),
		("int", "{0}.MinValue" , null),
		("uint", "{0}.MinValue" , "UInt"),
		("long", "{0}.MinValue" , null),
		("ulong", "{0}.MinValue" , "ULong"),
		("double", "{0}.NaN" , null),
		("float", "{0}.NaN" , null),
		("DateTime", "{0}.MinValue" , null),
		("Guid", "{0}.Empty" , null),
		("Version", null , null),
	};
#>
#if !NET && !NETSTANDARD
using System;
#endif
using System.Runtime.CompilerServices;
namespace <#=Namespace#>;
#nullable enable
public static partial class StringExtension
{
<# 
foreach(var (Type,Value,Name) in dic) {
	var name = Name ?? $"{Type[0].ToString().ToUpper()}{Type.Substring(1)}";
	var resultArg = "result";
#>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool To<#=name#>(this string? str, out <#=Type#> <#=resultArg#>) => <#=Type#>.TryParse(str, out <#=resultArg#>);

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static <#=Type#> To<#=name#>(this string? str) => <#=Type#>.TryParse(str, out var <#=resultArg#>) ? <#=resultArg#> : <#=Value is null ? "new()" : $"{string.Format(Value,Type)}"#>;

<# 
}
#>

}
